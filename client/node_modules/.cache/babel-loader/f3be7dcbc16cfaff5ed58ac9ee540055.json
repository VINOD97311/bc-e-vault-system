{"ast":null,"code":"const {\n  Multiaddr\n} = require('multiaddr');\nconst reduceValue = (_, v) => v;\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return \"tcp://\".concat(str, \":\").concat(port);\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp';\n  let explicitPort = \":\".concat(port);\n  const last = parts[parts.length - 1];\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n  return \"\".concat(protocol, \"://\").concat(str).concat(explicitPort);\n};\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => parts.length === 1 && parts[0].protocol === 'ip6' ? content : \"[\".concat(content, \"]\"),\n  tcp: (str, content, i, parts, opts) => parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol)) ? \"\".concat(str, \":\").concat(content) : tcpUri(str, content, parts, opts),\n  udp: (str, content) => \"udp://\".concat(str, \":\").concat(content),\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => \"\".concat(str, \"/ipfs/\").concat(content),\n  p2p: (str, content) => \"\".concat(str, \"/p2p/\").concat(content),\n  http: str => \"http://\".concat(str),\n  https: str => \"https://\".concat(str),\n  ws: str => \"ws://\".concat(str),\n  wss: str => \"wss://\".concat(str),\n  'p2p-websocket-star': str => \"\".concat(str, \"/p2p-websocket-star\"),\n  'p2p-webrtc-star': str => \"\".concat(str, \"/p2p-webrtc-star\"),\n  'p2p-webrtc-direct': str => \"\".concat(str, \"/p2p-webrtc-direct\")\n};\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr);\n  const parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(tuple => ({\n    protocol: parts.shift(),\n    content: tuple[1] ? parts.shift() : null\n  })).reduce((str, part, i, parts) => {\n    const reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(\"Unsupported protocol \".concat(part.protocol));\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":{"version":3,"names":["Multiaddr","require","reduceValue","_","v","tcpUri","str","port","parts","opts","assumeHttp","concat","protocol","explicitPort","last","length","Reducers","ip4","ip6","content","i","tcp","some","p","includes","udp","dnsaddr","dns4","dns6","ipfs","p2p","http","https","ws","wss","module","exports","multiaddr","ma","toString","split","slice","tuples","map","tuple","shift","reduce","part","Error"],"sources":["C:/6th sem/bc/Crime-Records-Blockchain/client/node_modules/multiaddr-to-uri/index.js"],"sourcesContent":["const { Multiaddr } = require('multiaddr')\n\nconst reduceValue = (_, v) => v\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = new Multiaddr(multiaddr)\n  const parts = multiaddr.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    }))\n    .reduce((str, part, i, parts) => {\n      const reduce = Reducers[part.protocol]\n      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}