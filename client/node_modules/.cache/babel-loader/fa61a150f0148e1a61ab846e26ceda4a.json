{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst withIs = require('class-is');\nconst CID = require('cids');\nclass DAGNode {\n  constructor(data, links, serialized, multihash) {\n    assert(serialized, 'DAGNode needs its serialized format');\n    assert(multihash, 'DAGNode needs its multihash');\n    this._cid = new CID(multihash);\n    this._data = data || Buffer.alloc(0);\n    this._links = links || [];\n    this._serialized = serialized;\n  }\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map(l => l.toJSON()),\n        multihash: this._cid.toBaseEncodedString(),\n        size: this.size\n      });\n    }\n    return Object.assign({}, this._json);\n  }\n  toString() {\n    return \"DAGNode <\".concat(this._cid.toBaseEncodedString(), \" - data: \\\"\").concat(this.data.toString(), \"\\\", links: \").concat(this.links.length, \", size: \").concat(this.size, \">\");\n  }\n  get data() {\n    return this._data;\n  }\n  set data(data) {\n    throw new Error(\"Can't set property: 'data' is immutable\");\n  }\n  get links() {\n    return this._links;\n  }\n  set links(links) {\n    throw new Error(\"Can't set property: 'links' is immutable\");\n  }\n  get serialized() {\n    return this._serialized;\n  }\n  set serialized(serialized) {\n    throw new Error(\"Can't set property: 'serialized' is immutable\");\n  }\n  get size() {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this.serialized.length);\n    }\n    return this._size;\n  }\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  }\n  get multihash() {\n    return this._cid.buffer;\n  }\n  set multihash(multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\");\n  }\n  get cid() {\n    return this._cid;\n  }\n  set cid(cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\");\n  }\n}\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});\nexports.create = require('./create');\nexports.clone = require('./clone');\nexports.addLink = require('./addLink');\nexports.rmLink = require('./rmLink');","map":{"version":3,"names":["assert","require","withIs","CID","DAGNode","constructor","data","links","serialized","multihash","_cid","_data","Buffer","alloc","_links","_serialized","toJSON","_json","Object","freeze","map","l","toBaseEncodedString","size","assign","toString","concat","length","Error","_size","undefined","reduce","sum","buffer","cid","exports","module","className","symbolName","create","clone","addLink","rmLink"],"sources":["C:/6th sem/bc/Crime-Records-Blockchain/client/node_modules/ipld-dag-pb/src/dag-node/index.js"],"sourcesContent":["'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst CID = require('cids')\n\nclass DAGNode {\n  constructor (data, links, serialized, multihash) {\n    assert(serialized, 'DAGNode needs its serialized format')\n    assert(multihash, 'DAGNode needs its multihash')\n\n    this._cid = new CID(multihash)\n    this._data = data || Buffer.alloc(0)\n    this._links = links || []\n    this._serialized = serialized\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.data,\n        links: this.links.map((l) => l.toJSON()),\n        multihash: this._cid.toBaseEncodedString(),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <${this._cid.toBaseEncodedString()} - data: \"${this.data.toString()}\", links: ${this.links.length}, size: ${this.size}>`\n  }\n\n  get data () {\n    return this._data\n  }\n\n  set data (data) {\n    throw new Error(\"Can't set property: 'data' is immutable\")\n  }\n\n  get links () {\n    return this._links\n  }\n\n  set links (links) {\n    throw new Error(\"Can't set property: 'links' is immutable\")\n  }\n\n  get serialized () {\n    return this._serialized\n  }\n\n  set serialized (serialized) {\n    throw new Error(\"Can't set property: 'serialized' is immutable\")\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this.links.reduce((sum, l) => sum + l.size, this.serialized.length)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get multihash () {\n    return this._cid.buffer\n  }\n\n  set multihash (multihash) {\n    throw new Error(\"Can't set property: 'multihash' is immutable\")\n  }\n\n  get cid () {\n    return this._cid\n  }\n\n  set cid (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}